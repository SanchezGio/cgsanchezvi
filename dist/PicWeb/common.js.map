{"version":3,"sources":["./src/app/shared/utils/base-form-user.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAyD;AACd;;;AAGpC,MAAM,YAAY;IAIvB,YAAoB,EAAe;QAAf,OAAE,GAAF,EAAE,CAAa;QAH3B,iBAAY,GAAG,cAAc,CAAC;QACtC,iBAAY,GAAG,IAAI,CAAC;QAIpB,aAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACvB,QAAQ,EAAE;gBACR,EAAE;gBACF,CAAC,yDAAU,CAAC,QAAQ,CAAC;aACtB;YACD,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;SAClC,CAAC,CAAC;IATmC,CAAC;IAWvC,YAAY,CAAC,KAAa;QACxB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAC5B,OAAO,CACL,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC;YACpE,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,KAAK,CAChC,CAAC;IACJ,CAAC;IAEO,eAAe,CAAC,KAAa;;QACnC,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAE5C,IAAI,MAAM,EAAE;YACV,MAAM,SAAS,SAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,SAAS,0CAAE,cAAc,CAAC;YACpD,MAAM,QAAQ,GAAG;gBACf,QAAQ,EAAE,yBAAyB;gBACnC,OAAO,EAAE,oBAAoB;gBAC7B,SAAS,EAAE,kCAAkC,SAAS,aAAa;aACpE,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACnD,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;SACxC;IACH,CAAC;;wEArCU,YAAY;+FAAZ,YAAY,WAAZ,YAAY,mBADC,MAAM;6FACnB,YAAY;cADxB,wDAAU;eAAC,EAAE,UAAU,EAAE,MAAM,EAAE","file":"common.js","sourcesContent":["import { FormBuilder, Validators } from '@angular/forms';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BaseFormUser {\r\n  private isValidEmail = /\\S+@\\S+\\.\\S+/;\r\n  errorMessage = null;\r\n\r\n  constructor(private fb: FormBuilder) {}\r\n\r\n  baseForm = this.fb.group({\r\n    username: [\r\n      '',\r\n      [Validators.required],\r\n    ],\r\n    password: ['', [Validators.required, Validators.minLength(5)]],\r\n    role: ['', [Validators.required]],\r\n  });\r\n\r\n  isValidField(field: string): boolean {\r\n    this.getErrorMessage(field);\r\n    return (\r\n      (this.baseForm.get(field).touched || this.baseForm.get(field).dirty) &&\r\n      !this.baseForm.get(field).valid\r\n    );\r\n  }\r\n\r\n  private getErrorMessage(field: string): void {\r\n    const { errors } = this.baseForm.get(field);\r\n\r\n    if (errors) {\r\n      const minlenght = errors?.minlength?.requiredLength;\r\n      const messages = {\r\n        required: 'You must enter a value.',\r\n        pattern: 'Not a valid email.',\r\n        minlength: `This field must be longer than ${minlenght} characters`,\r\n      };\r\n\r\n      const errorKey = Object.keys(errors).find(Boolean);\r\n      this.errorMessage = messages[errorKey];\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}